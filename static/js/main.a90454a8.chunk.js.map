{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","Fragment","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAIA,SAASA,EAAOC,GAEV,OACE,wBAAQC,UAAW,SAASC,QAAUF,EAAME,QAA5C,SAEKF,EAAMG,Q,IAMXC,E,kKAEJ,SAAaC,GAAI,IAAD,OACd,OAAO,cAACN,EAAD,CACGI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAY,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAIjD,WACE,OACE,sBAAKJ,UAAU,YAAf,UACE,sBAAKA,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAzBTC,IAAMC,WAgCpBC,E,kDAEJ,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPD,E,+CAUnB,SAAYZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQM,OAAQ,GAChBZ,QAAQW,QAC7BE,EAAgBb,IAAYA,EAAQF,KAGvCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACVR,QAAUA,EAAQS,OAAO,CAAC,CACtBf,QAAUA,KAEdS,SAAWV,KAAKM,MAAMI,QACtBC,WAAYJ,EAAQM,Y,oBAG5B,SAAOI,GACHjB,KAAKe,SAAS,CACVJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,oBAIhC,WAAU,IAiBFC,EAjBC,OAECX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAK,SAACL,EAAMM,GAC9B,IAAMC,EAAOD,EAAO,cAAgBA,EAAO,eAG3C,OACI,oBAAe5B,UAAU,WAAzB,SACI,wBAAQA,UAAU,SAASC,QAAS,kBAAM,EAAK6B,OAAOF,IAAtD,SAA8DC,KADzDD,MAajB,OALIL,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMI,QAAU,IAAM,KAIzD,eAAC,IAAMgB,SAAP,WACA,oBAAI/B,UAAU,QAAd,yBACA,6BAAKuB,IACL,sBAAKvB,UAAU,OAAf,UAEE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,QAGvC,oBAAIJ,UAAU,iBAAd,SACO0B,c,GAxEElB,IAAMC,WAgFzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CACrC,kBAAkB6B,EAAM7B,GAAxB,GAAO8B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAKTG,IAASC,OACP,cAAC5B,EAAD,IACA6B,SAASC,eAAe,W","file":"static/js/main.a90454a8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    \n      return (\n        <button className= \"square\" onClick= {props.onClick} \n        >\n            {props.value}\n        </button>\n      );\n    \n  }\n  \n  class Board extends React.Component {\n\n    renderSquare(i) {\n      return <Square \n                value={this.props.squares[i]}\n                onClick = { () => this.props.onClick(i)} \n            />;\n    }\n  \n    render() {\n      return (\n        <div className=\"container\">\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            stepNumber: 0\n        };\n    }\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length -1];\n        const squares = current.squares.slice();\n        if(calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history : history.concat([{\n                squares : squares,\n            }]),\n            xIsNext : !this.state.xIsNext,\n            stepNumber: history.length,\n        });\n    }\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        })\n    }\n    \n    render() {\n\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map( (step, move) => {\n            const desc = move ? 'Go to move ' + move : 'Go to start!';\n            \n           \n            return (\n                <li key={move} className=\"move-box\">\n                    <button className=\"button\" onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n          <React.Fragment>\n          <h1 className='title'>Tic Tac Toe</h1>\n          <h2>{status}</h2>\n          <div className=\"game\">\n            \n            <div className=\"game-board\">\n              <Board \n                  squares={current.squares}\n                  onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <ol className=\"btn-moves-info\">\n                  {moves}\n            </ol> \n          </div>\n          </React.Fragment>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}