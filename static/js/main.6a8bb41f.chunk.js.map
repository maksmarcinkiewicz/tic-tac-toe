{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","Fragment","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAIA,SAASA,EAAOC,GAEV,OACE,wBAAQC,UAAW,SAASC,QAAUF,EAAME,QAA5C,SAEKF,EAAMG,Q,IAMXC,E,kKAEJ,SAAaC,GAAI,IAAD,OACd,OAAO,cAACN,EAAD,CACGI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAY,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAIjD,WACE,OACE,sBAAKJ,UAAU,YAAf,UACE,sBAAKA,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAzBTC,IAAMC,WAgCpBC,E,kDAEJ,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPD,E,+CAUnB,SAAYZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQM,OAAQ,GAChBZ,QAAQW,QAC7BE,EAAgBb,IAAYA,EAAQF,KAGvCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACVR,QAAUA,EAAQS,OAAO,CAAC,CACtBf,QAAUA,KAEdS,SAAWV,KAAKM,MAAMI,QACtBC,WAAYJ,EAAQM,Y,oBAG5B,SAAOI,GACHjB,KAAKe,SAAS,CACVJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,oBAIhC,WAAU,IAiBFC,EAjBC,OAECX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAK,SAACL,EAAMM,GAC9B,IAAMC,EAAOD,EAAO,cAAgBA,EAAO,eAG3C,OACI,oBAAe5B,UAAU,WAAzB,SACI,wBAAQA,UAAU,SAASC,QAAS,kBAAM,EAAK6B,OAAOF,IAAtD,SAA8DC,KADzDD,MAajB,OALIL,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMI,QAAU,IAAM,KAIzD,eAAC,IAAMgB,SAAP,WACA,oBAAI/B,UAAU,QAAd,yBACA,6BAAKuB,IACL,sBAAKvB,UAAU,OAAf,UAEE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,QAGvC,oBAAIJ,UAAU,iBAAd,SACO0B,c,GAxEElB,IAAMC,WAgFzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CACrC,kBAAkB6B,EAAM7B,GAAxB,GAAO8B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAKTG,IAASC,OACP,cAAC5B,EAAD,IACA6B,SAASC,eAAe,W","file":"static/js/main.6a8bb41f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    \r\n      return (\r\n        <button className= \"square\" onClick= {props.onClick} \r\n        >\r\n            {props.value}\r\n        </button>\r\n      );\r\n    \r\n  }\r\n  \r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      return <Square \r\n                value={this.props.squares[i]}\r\n                onClick = { () => this.props.onClick(i)} \r\n            />;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0\r\n        };\r\n    }\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history : history.concat([{\r\n                squares : squares,\r\n            }]),\r\n            xIsNext : !this.state.xIsNext,\r\n            stepNumber: history.length,\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n    \r\n    render() {\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map( (step, move) => {\r\n            const desc = move ? 'Go to move ' + move : 'Go to start!';\r\n            \r\n           \r\n            return (\r\n                <li key={move} className=\"move-box\">\r\n                    <button className=\"button\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n          <React.Fragment>\r\n          <h1 className='title'>Tic Tac Toe</h1>\r\n          <h2>{status}</h2>\r\n          <div className=\"game\">\r\n            \r\n            <div className=\"game-board\">\r\n              <Board \r\n                  squares={current.squares}\r\n                  onClick={(i) => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <ol className=\"btn-moves-info\">\r\n                  {moves}\r\n            </ol> \r\n          </div>\r\n          </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}